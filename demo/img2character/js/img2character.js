// Generated by CoffeeScript 1.8.0
var ImgToCharacter;

ImgToCharacter = (function() {
  var charWidthComputed, createCanvas, createCharImage, createCharMatrix, grayToChar, rgbToGray;

  createCanvas = function(width, height) {
    var canvas;
    canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    return canvas;
  };

  grayToChar = function(gray, characters, charactersWidth) {
    var index;
    index = Math.floor(gray / 255 * characters.length);
    return {
      'char': characters[index],
      'width': charactersWidth[index]
    };
  };

  rgbToGray = function(r, g, b) {
    return 0.299 * r + 0.578 * g + 0.114 * b;
  };

  charWidthComputed = function(char) {
    var computedStyle, span, width;
    span = document.createElement('span');
    span.setAttribute('style', 'display:inline-block;white-space:pre;');
    span.innerHTML = char;
    span = document.body.appendChild(span);
    computedStyle = window.getComputedStyle(span, null);
    width = parseInt(computedStyle['width']);
    document.body.removeChild(span);
    return Math.round(width);
  };

  createCharMatrix = function(params) {
    var charHeight, characters, charactersWidth, currentHeight, currentPoint, height, heightIndex, html, imgData, width, widthIndex;
    imgData = params.imgData || null;
    height = params.height || 0;
    width = params.width || 0;
    charHeight = params.charHeight || 12;
    characters = params.characters;
    charactersWidth = params.charactersWidth;
    if (!imgData) {
      return;
    }
    heightIndex = 0;
    widthIndex = 0;
    currentHeight = 0;
    currentPoint = 0;
    html = [];
    for( heightIndex = 0 ; heightIndex < height ; heightIndex += charHeight ){
			html.push('<p>');
			currentHeight = heightIndex*width*4;
			for( widthIndex = 0 ; widthIndex < width ; widthIndex += charWidth ){
				currentPoint = currentHeight+widthIndex*4;
				r = imgData[currentPoint];
				g = imgData[currentPoint+1];
				b = imgData[currentPoint+2];
				charInfo = grayToChar(rgbToGray(r,g,b),characters,charactersWidth);
				html.push(charInfo.char);
				charWidth = charInfo.width;
			}
			html.push('</p>');
		};
    return html.join('');
  };

  createCharImage = function(params) {
    var canvas, charHeight, charWidth, characters, charactersWidth, ctx, currentHeight, currentPoint, height, heightIndex, imgData, text, width, widthIndex;
    imgData = params.imgData || null;
    height = params.height || 0;
    width = params.width || 0;
    charHeight = params.charHeight || 12;
    characters = params.characters;
    charactersWidth = params.charactersWidth;
    console.log(charactersWidth);
    canvas = createCanvas(width, height);
    ctx = canvas.getContext('2d');
    if (!imgData) {
      return;
    }
    heightIndex = 0;
    widthIndex = 0;
    currentHeight = 0;
    currentPoint = 0;
    text = [];
    charWidth = 0;
    for( heightIndex = 0 ; heightIndex < height ; heightIndex += charHeight ){
			currentHeight = heightIndex*width*4;
			text = [];
			for( widthIndex = 0 ; widthIndex < width ; widthIndex += charWidth ){
				currentPoint = currentHeight+widthIndex*4;
				r = imgData[currentPoint];
				g = imgData[currentPoint+1];
				b = imgData[currentPoint+2];
				charInfo = grayToChar(rgbToGray(r,g,b),characters,charactersWidth);
				text.push(charInfo.char);
				charWidth = charInfo.width;

			}
			ctx.strokeText(text.join(''),0,heightIndex);
		};
    return canvas.toDataURL();
  };

  function ImgToCharacter(imgObj) {
    this.imgObj = imgObj;
    this.setCharacter();
  }

  ImgToCharacter.prototype.characters = ['#', '&', '$', '*', 'o', '!', ';', ' '];

  ImgToCharacter.prototype.charactersWidth = [];

  ImgToCharacter.prototype.length = 8;

  ImgToCharacter.prototype.charHeight = 12;

  ImgToCharacter.prototype.setCharacter = function(characters) {
    var char, index, _i, _len, _ref, _results;
    this.characters = characters || this.characters;
    this.length = this.characters.length;
    _ref = this.characters;
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      char = _ref[index];
      _results.push(this.charactersWidth[index] = charWidthComputed(char));
    }
    return _results;
  };

  ImgToCharacter.prototype.create = function(type) {
    var canvas, createParams, ctx, height, imgData, imgDataObj, width;
    if (type == null) {
      type = 'char';
    }
    width = this.imgObj.width;
    height = this.imgObj.height;
    canvas = createCanvas(width, height);
    ctx = canvas.getContext('2d');
    ctx.drawImage(this.imgObj, 0, 0);
    imgDataObj = ctx.getImageData(0, 0, width, height);
    imgData = imgDataObj.data;
    createParams = {
      'imgData': imgData,
      'height': height,
      'width': width,
      'charHeight': this.charHeight,
      'characters': this.characters,
      'charactersWidth': this.charactersWidth
    };
    if (type === 'char') {
      return createCharMatrix(createParams);
    } else {
      return createCharImage(createParams);
    }
  };

  return ImgToCharacter;

})();

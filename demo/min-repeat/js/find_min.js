// Generated by CoffeeScript 1.7.1
(function() {
  var FindMinRepeat, img;
  FindMinRepeat = (function() {
    var arrayCopy, arrayTransform, compare, compareArr, createCanvas;

    createCanvas = function(width, height) {
      var canvas;
      canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      return canvas;
    };

    compareArr = function(arr1, arr2) {
      var index, value, _i, _len;
      for (index = _i = 0, _len = arr1.length; _i < _len; index = ++_i) {
        value = arr1[index];
        if (value !== arr2[index]) {
          return false;
        }
      }
      return true;
    };

    arrayCopy = function(arr) {
      var copyArr, index, value, _i, _len;
      copyArr = [];
      for (index = _i = 0, _len = arr.length; _i < _len; index = ++_i) {
        value = arr[index];
        copyArr[index] = value;
      }
      return copyArr;
    };

    arrayTransform = function(arr) {
      var i, j, sumi, sumj, transform;
      transform = [];
      i = 0;
      j = 0;
      sumi = arr[0].length;
      sumj = arr.length;
      for(;i<sumi;++i){
				if( !transform[i] ){
					transform[i] = []
				}
				for( j=0;j<sumj;++j ){
					transform[i].push( arr[j][i] )
				}
			};
      return transform;
    };

    compare = function(arr) {
      var compareCount, compared, curComp, curCompIndex, curCompSum, height, minRepeat, width, x, x2, y;
      minRepeat = [];
      compared = [];
      curComp = [];
      curCompSum = 0;
      curCompIndex = 0;
      compareCount = 0;
      x = 0;
      x2 = 0;
      y = 0;
      width = arr.length;
      height = arr[0].length;
      for( x = 0 ; x < width ; ++x ){
				compared.push(arr[x])
				if( curComp.length == 0 ){
					curComp = arrayCopy(compared)
					curCompSum = curComp.length
				}
				if( curCompIndex === curCompSum ){
					curCompIndex = 0
					compareCount++
				}
				if( !compareArr(curComp[curCompIndex++],arr[x]) ){
					if( compareCount == 0 ){
						curComp.push(arr[curCompSum])
						x = curCompSum
					}else{
						curComp = arrayCopy(compared)
					}
					curCompSum = curComp.length
					curCompIndex = 0
					compareCount = 0
				}

			};
      return curCompSum;
    };

    function FindMinRepeat(img) {
      this.img = img;
      this.width = img.width;
      this.height = img.height;
      this.canvas = createCanvas(this.width, this.height);
      this.appendImg();
    }

    FindMinRepeat.prototype.getImageData = function() {
      var ctx;
      ctx = this.canvas.getContext('2d');
      ctx.drawImage(this.img, 0, 0);
      return ctx.getImageData(0, 0, this.width, this.height);
    };

    FindMinRepeat.prototype.imageDataFormat = function() {
      var formatData, i, imageData, pixIndex, sum, width, x;
      imageData = this.getImageData();
      formatData = [];
      width = this.width;
      i = 0;
      pixIndex = 0;
      x = 0;
      sum = imageData.data.length;
      for(; i < sum ; i+=4){
				if(!formatData[x]){
					formatData[x] = []
				}
				formatData[x].push(imageData.data[i].toString(16)+imageData.data[i+1].toString(16)+imageData.data[i+2].toString(16)+imageData.data[i+3].toString(16))
				++pixIndex
				if( pixIndex % width == 0 ){
					x++
				}
			};
      return formatData;
    };

    FindMinRepeat.prototype.getMinSize = function() {
      var height, imageDataHW, imageDataWH, width;
      imageDataHW = this.imageDataFormat();
      imageDataWH = arrayTransform(imageDataHW);
      width = compare(imageDataWH);
      height = compare(imageDataHW);
      return {
        'height': height,
        'width': width
      };
    };

    FindMinRepeat.prototype.getMinRepeat = function() {
      var ctx, imageData, size, _canvas, _ctx;
      size = this.getMinSize();
      _canvas = createCanvas(size.width, size.height);
      ctx = this.canvas.getContext('2d');
      _ctx = _canvas.getContext('2d');
      imageData = ctx.getImageData(0, 0, size.width, size.height);
      _ctx.putImageData(imageData, 0, 0);
      return _canvas.toDataURL();
    };

    FindMinRepeat.prototype.appendImg = function() {
      var div, _img;
      div = document.getElementById('test');
      _img = document.createElement('img');
      _img.src = this.getMinRepeat();
      return div.appendChild(_img);
    };

    return FindMinRepeat;

  })();
  img = new Image();
  img.src = 'target1.png';
  return img.onload = function() {
    return new FindMinRepeat(img);
  };
})();

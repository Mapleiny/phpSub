// Generated by CoffeeScript 1.6.3
(function() {
  var $captureInfo, $createArea, $fileCapture, $fileSelect, $fileSelectBtn, $getMinRepeat, $imgComtainer, $imgPreview, $loading, $minSelect, $operationArea, $selectArea, $selectPreview, addSelectEvent, createImgSelect, createPreview, fileDrag, findMinRepeat, getMinRepeatImg, getMinRepeatSize, getTranslateXY, imageSelectInit, moveElem, screenChange, showPreview;
  $createArea = $('#create-area');
  $operationArea = $('#opration-area');
  $fileCapture = $('#file-capture');
  $fileSelect = $('#file-select');
  $fileSelectBtn = $('#file-select-btn');
  $captureInfo = $fileCapture.find('.info');
  $selectArea = $('#select-area');
  $imgComtainer = $('#img-conrainer');
  $minSelect = $('#min-select');
  $selectPreview = $('#select-preview');
  $imgPreview = null;
  $getMinRepeat = $('#get-min-repeat');
  $loading = $('#loading');
  findMinRepeat = null;
  $fileSelectBtn.on('click', function() {
    return $fileSelect.click();
  });
  fileDrag = new FileDrag({
    'dragDrop': $fileCapture[0],
    'fileInput': $fileSelect[0]
  });
  fileDrag.filter = function(files) {
    var file, fileslist, _i, _len;
    fileslist = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (file.type.indexOf('image') >= 0) {
        fileslist.push(file);
      }
    }
    return fileslist;
  };
  fileDrag.onDragOver = function(e) {
    $captureInfo.html('可以放手了，大侠！');
    return $fileCapture.addClass('hover');
  };
  fileDrag.onDragLeave = function(e) {
    $captureInfo.html('将图片拖进此处或');
    return $fileCapture.removeClass('hover');
  };
  fileDrag.onSelect = function(files) {
    var file, reader;
    if (files.length === 0) {
      return;
    }
    $loading.show();
    $createArea.hide();
    reader = new FileReader();
    file = files.shift();
    reader.readAsDataURL(file);
    return reader.onload = function(evt) {
      var img;
      img = new Image();
      img.src = evt.target.result;
      return img.onload = function() {
        return imageSelectInit(img, img.width, img.height);
      };
    };
  };
  screenChange = function(type) {
    if (type === 'select') {
      $createArea.show();
      return $operationArea.hide();
    } else {
      $createArea.hide();
      return $operationArea.show();
    }
  };
  getMinRepeatSize = function(imgObject) {
    findMinRepeat = new FindMinRepeat(imgObject);
    return findMinRepeat.getMinSize();
  };
  getMinRepeatImg = function(repeatSize) {
    return findMinRepeat.getMinRepeat(repeatSize);
  };
  imageSelectInit = function(imgObject, originWidth, originHeight) {
    var $imgObject, height, maxWidth, minRepeatSize, width;
    screenChange('opration');
    $loading.hide();
    maxWidth = $selectArea.width();
    minRepeatSize = getMinRepeatSize(imgObject);
    if (originWidth > maxWidth) {
      imgObject.width = maxWidth;
    }
    $imgObject = $(imgObject);
    $imgObject.appendTo($imgComtainer);
    width = $imgObject.width();
    height = $imgObject.height();
    $imgComtainer.width(width);
    $imgComtainer.height(height);
    createImgSelect({
      'width': minRepeatSize.width,
      'height': minRepeatSize.height
    }, {
      'width': width,
      'height': height
    }, {
      'width': originWidth,
      'height': originHeight
    });
    $imgPreview = $(imgObject).clone().removeAttr('width');
    return createPreview($imgPreview, {
      'width': minRepeatSize.width,
      'height': minRepeatSize.height
    });
  };
  createImgSelect = function(originRepeatSize, containerSize, originSize) {
    var divInfo, divInfoList, lrwidth, repeatSize, scale, tbheight, tbwidth, _i, _len;
    repeatSize = {};
    scale = containerSize.width / originSize.width;
    repeatSize.width = originRepeatSize.width * scale;
    repeatSize.height = originRepeatSize.height * scale;
    tbwidth = 2 * containerSize.width - repeatSize.width;
    tbheight = containerSize.height - repeatSize.height;
    lrwidth = containerSize.width - repeatSize.width;
    divInfoList = [
      {
        'width': tbwidth,
        'height': tbheight,
        'bottom': repeatSize.height,
        'left': repeatSize.width - containerSize.width
      }, {
        'width': lrwidth,
        'height': repeatSize.height,
        'top': 0,
        'left': repeatSize.width
      }, {
        'width': tbwidth,
        'height': tbheight,
        'top': repeatSize.height,
        'left': repeatSize.width - containerSize.width
      }, {
        'width': lrwidth,
        'height': repeatSize.height,
        'top': 0,
        'right': repeatSize.width
      }
    ];
    $minSelect.css(repeatSize);
    for (_i = 0, _len = divInfoList.length; _i < _len; _i++) {
      divInfo = divInfoList[_i];
      $minSelect.append($('<div></div>').css(divInfo));
    }
    return addSelectEvent($minSelect, containerSize, originRepeatSize);
  };
  moveElem = function($elem, x, y, containerSize) {
    var rangeX, rangeY, repeatHeight, repeatWidth;
    repeatWidth = $elem.width();
    repeatHeight = $elem.height();
    rangeX = containerSize.width - repeatWidth;
    rangeY = containerSize.height - repeatHeight;
    if (x < 0) {
      x = 0;
    }
    if (x > rangeX) {
      x = rangeX;
    }
    if (y < 0) {
      y = 0;
    }
    if (y > rangeY) {
      y = rangeY;
    }
    $elem.css('-webkit-transform', 'matrix(1, 0, 0, 1, ' + x + ',' + y + ')');
    return showPreview(x, y, containerSize);
  };
  getTranslateXY = function($elem) {
    var translate, translateX, translateY;
    translate = $elem.css('-webkit-transform');
    if (translate === 'none') {
      translate = 'matrix(1,0,0,1,0,0)';
    }
    translate = translate.replace('matrix(', '');
    translate = translate.replace(')', '');
    translate = translate.split(',');
    translateX = parseInt(translate[4]);
    translateY = parseInt(translate[5]);
    return {
      'x': translateX,
      'y': translateY
    };
  };
  createPreview = function(imgObj, minRepeatSize) {
    return $selectPreview.append(imgObj).css(minRepeatSize);
  };
  showPreview = function(x, y, containerSize) {
    var translateX, translateY;
    translateX = x / containerSize.width * 100;
    translateY = y / containerSize.height * 100;
    return $imgPreview.css('-webkit-transform', 'translate(-' + translateX + '%,-' + translateY + '%)');
  };
  return addSelectEvent = function($elem, containerSize, repeatSize) {
    var currentX, currentY, isMove, moveSelect, originX, originY;
    isMove = false;
    originX = 0;
    originY = 0;
    currentX = 0;
    currentY = 0;
    moveSelect = function(e) {
      event.preventDefault();
      if (isMove) {
        return moveElem($elem, e.pageX - originX + currentX, e.pageY - originY + currentY, containerSize);
      }
    };
    $elem.on('mousedown', function(e) {
      var currentTranslate;
      event.preventDefault();
      isMove = true;
      originX = e.pageX;
      originY = e.pageY;
      currentTranslate = getTranslateXY($elem);
      currentX = currentTranslate.x;
      currentY = currentTranslate.y;
      $(document).one('mouseup', function(e) {
        isMove = false;
        return $(document).off('mousemove.select');
      });
      return $(document).on('mousemove.select', moveSelect);
    });
    return $getMinRepeat.on('click', function() {
      var shift, src;
      shift = getTranslateXY($imgPreview);
      shift.x = Math.abs(shift.x);
      shift.y = Math.abs(shift.y);
      src = getMinRepeatImg(shift, repeatSize);
      return window.open(src);
    });
  };
})();
